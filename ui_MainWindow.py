# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '\MainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.13.0
#
# WARNING! All changes made in this file will be lost!


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(100, 302)
        MainWindow.setStatusTip("")

        self.centralWidget = QtWidgets.QWidget(MainWindow)
        self.centralWidget.setObjectName("centralWidget")
        self.scrollArea = QtWidgets.QScrollArea()
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollArea2 = QtWidgets.QScrollArea()
        self.scrollArea2.setWidgetResizable(True)
        self.scrollArea2.setObjectName("scrollArea2")
        self.scrollArea3 = QtWidgets.QScrollArea()
        self.scrollArea3.setWidgetResizable(True)
        self.scrollArea3.setObjectName("scrollArea3")
        self.scrollArea4 = QtWidgets.QScrollArea()
        self.scrollArea4.setWidgetResizable(True)
        self.scrollArea4.setObjectName("scrollArea4")

        self.gridLayout = QtWidgets.QGridLayout(self.centralWidget)
        self.gridLayout.addWidget(self.scrollArea, 0, 0)
        self.gridLayout.addWidget(self.scrollArea2, 0, 1)
        self.gridLayout.addWidget(self.scrollArea3, 1, 0)
        self.gridLayout.addWidget(self.scrollArea4, 1, 1)

        self.LabB = QtWidgets.QLabel()
        self.LabB.setGeometry(QtCore.QRect(0, 0, 125, 249))
        self.LabB.setAlignment(QtCore.Qt.AlignCenter)
        self.LabB.setObjectName("LabB")

        self.LabC = QtWidgets.QLabel()
        self.LabC.setGeometry(QtCore.QRect(0, 0, 125, 249))
        self.LabC.setAlignment(QtCore.Qt.AlignCenter)
        self.LabC.setObjectName("LabC")

        self.LabD = QtWidgets.QLabel()
        self.LabD.setGeometry(QtCore.QRect(0, 0, 125, 249))
        self.LabD.setAlignment(QtCore.Qt.AlignCenter)
        self.LabD.setObjectName("LabD")

        self.LabE = QtWidgets.QLabel()
        self.LabE.setGeometry(QtCore.QRect(0, 0, 125, 249))
        self.LabE.setAlignment(QtCore.Qt.AlignCenter)
        self.LabE.setObjectName("LabE")

        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.LabB)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setSpacing(0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.LabPicture = QtWidgets.QLabel(self.LabB)
        self.LabPicture.setText("")
        self.LabPicture.setAlignment(QtCore.Qt.AlignCenter)
        self.LabPicture.setObjectName("LabPicture")
        self.verticalLayout_2.addWidget(self.LabPicture)

        self.scrollArea.setWidget(self.LabB)
        self.scrollArea2.setWidget(self.LabC)
        self.scrollArea3.setWidget(self.LabD)
        self.scrollArea4.setWidget(self.LabE)

        # self.verticalLayout_3.addWidget(self.scrollArea)
        MainWindow.setCentralWidget(self.centralWidget)

        self.menuBar = QtWidgets.QMenuBar(MainWindow)
        self.menuBar.setGeometry(QtCore.QRect(0, 0, 511, 17))
        self.menuBar.setObjectName("menuBar")
        self.menuFile = QtWidgets.QMenu(self.menuBar)
        self.menuFile.setObjectName("menuFile")
        self.menuEdit = QtWidgets.QMenu(self.menuBar)
        self.menuEdit.setObjectName("menuEdit")
        self.menuDL_2 = QtWidgets.QMenu(self.menuEdit)
        self.menuDL_2.setObjectName("menuDL_2")
        self.menuDL_3 = QtWidgets.QMenu(self.menuDL_2)
        self.menuDL_3.setObjectName("menuDL_3")
        self.menuThreshold = QtWidgets.QMenu(self.menuDL_2)
        self.menuThreshold.setObjectName("menuThreshold")
        self.menuHuman_Modify_2 = QtWidgets.QMenu(self.menuEdit)
        self.menuHuman_Modify_2.setObjectName("menuHuman_Modify_2")
        self.menuEnhancement = QtWidgets.QMenu(self.menuEdit)
        self.menuEnhancement.setObjectName("menuEnhancement")
        self.menuView = QtWidgets.QMenu(self.menuBar)
        self.menuView.setObjectName("menuView")
        self.menuSetting = QtWidgets.QMenu(self.menuBar)
        self.menuSetting.setObjectName("menuSetting")
        MainWindow.setMenuBar(self.menuBar)

        self.mainToolBar = QtWidgets.QToolBar(MainWindow)
        self.mainToolBar.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.mainToolBar.setObjectName("mainToolBar")
        MainWindow.addToolBar(QtCore.Qt.LeftToolBarArea, self.mainToolBar)

        self.statusBar = QtWidgets.QStatusBar(MainWindow)
        self.statusBar.setObjectName("statusBar")
        MainWindow.setStatusBar(self.statusBar)

        self.filelist = QtWidgets.QDockWidget(MainWindow)
        self.filelist.setFloating(False)
        self.filelist.setAllowedAreas(QtCore.Qt.AllDockWidgetAreas)
        self.filelist.setObjectName("filelist")
        self.filelist_2 = QtWidgets.QWidget()
        self.filelist_2.setObjectName("filelist_2")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.filelist_2)
        self.verticalLayout.setContentsMargins(11, 11, 11, 11)
        self.verticalLayout.setSpacing(6)
        self.verticalLayout.setObjectName("verticalLayout")
        self.search = QtWidgets.QLineEdit(self.filelist_2)
        self.search.setObjectName("search")
        self.verticalLayout.addWidget(self.search)
        self.listWidget = QtWidgets.QListWidget(self.filelist_2)
        self.listWidget.setObjectName("listWidget")
        self.verticalLayout.addWidget(self.listWidget)
        self.filelist.setWidget(self.filelist_2)

        self.textBrowser = QtWidgets.QTextBrowser()
        self.textBrowser.setObjectName("textBrowser")
        self.verticalLayout.addWidget(self.textBrowser)

        self.SuesLogo = QtWidgets.QLabel()
        self.SuesLogo.setAlignment(Qt.AlignCenter)
        self.SuesLogo.setPixmap(QtGui.QPixmap("images/sues.png").scaled(300, 80))
        self.SuesLogo.setObjectName("Logo")
        self.verticalLayout.addWidget(self.SuesLogo)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(2), self.filelist)

        self.actionOpen = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("images/folder.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionOpen.setIcon(icon)
        self.actionOpen.setObjectName("actionOpen")
        self.actionNext_Image = QtWidgets.QAction(MainWindow)
        self.actionNext_Image.setEnabled(False)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("images/next.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionNext_Image.setIcon(icon1)
        self.actionNext_Image.setObjectName("actionNext_Image")
        self.actionPrev_Image = QtWidgets.QAction(MainWindow)
        self.actionPrev_Image.setEnabled(False)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("images/prev.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionPrev_Image.setIcon(icon2)
        self.actionPrev_Image.setObjectName("actionPrev_Image")
        self.actionOpen_Dir = QtWidgets.QAction(MainWindow)
        self.actionOpen_Dir.setIcon(icon)
        self.actionOpen_Dir.setObjectName("actionOpen_Dir")
        self.actZoomIn = QtWidgets.QAction(MainWindow)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/icons/images/zoom-in.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actZoomIn.setIcon(icon3)
        self.actZoomIn.setObjectName("actZoomIn")
        self.actZoomOut = QtWidgets.QAction(MainWindow)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/icons/images/zoom-out.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actZoomOut.setIcon(icon4)
        self.actZoomOut.setObjectName("actZoomOut")
        self.actZoomRealSize = QtWidgets.QAction(MainWindow)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(":/icons/images/zoom.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actZoomRealSize.setIcon(icon5)
        self.actZoomRealSize.setObjectName("actZoomRealSize")
        self.actZoomFitWin = QtWidgets.QAction(MainWindow)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(":/icons/images/fit-window.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actZoomFitWin.setIcon(icon6)
        self.actZoomFitWin.setObjectName("actZoomFitWin")
        self.actZoomFitW = QtWidgets.QAction(MainWindow)
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap(":/icons/images/fit-width.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actZoomFitW.setIcon(icon7)
        self.actZoomFitW.setObjectName("actZoomFitW")
        self.actionSave_Origin_as = QtWidgets.QAction(MainWindow)
        self.actionSave_Origin_as.setEnabled(False)
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap("images/save(1).png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionSave_Origin_as.setIcon(icon8)
        self.actionSave_Origin_as.setObjectName("actionSave_Origin_as")
        self.actionSave_Label_as = QtWidgets.QAction(MainWindow)
        self.actionSave_Label_as.setEnabled(False)
        self.actionSave_Label_as.setIcon(icon8)
        self.actionSave_Label_as.setObjectName("actionSave_Label_as")
        self.actionChange_Output_Dir = QtWidgets.QAction(MainWindow)
        self.actionChange_Output_Dir.setEnabled(True)
        self.actionChange_Output_Dir.setIcon(icon)
        self.actionChange_Output_Dir.setStatusTip("")
        self.actionChange_Output_Dir.setObjectName("actionChange_Output_Dir")
        self.actionDelete_Label_File = QtWidgets.QAction(MainWindow)
        self.actionDelete_Label_File.setEnabled(False)
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap("images/exit.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionDelete_Label_File.setIcon(icon9)
        self.actionDelete_Label_File.setObjectName("actionDelete_Label_File")
        self.actionQuit = QtWidgets.QAction(MainWindow)
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap("images/bye.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionQuit.setIcon(icon10)
        self.actionQuit.setObjectName("actionQuit")
        self.actionDouble_Column = QtWidgets.QAction(MainWindow)
        self.actionDouble_Column.setEnabled(False)
        icon11 = QtGui.QIcon()
        icon11.addPixmap(QtGui.QPixmap("images/compute.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionDouble_Column.setIcon(icon11)

        icon123 = QtGui.QIcon()
        icon123.addPixmap(QtGui.QPixmap("images/RMDC.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionDouble_Column.setIcon(icon123)

        self.actionDouble_Column.setObjectName("actionDouble_Column")
        self.actionSingle_Column = QtWidgets.QAction(MainWindow)
        self.actionSingle_Column.setEnabled(False)
        self.actionSingle_Column.setIcon(icon11)
        self.actionSingle_Column.setObjectName("actionSingle_Column")
        self.actionHE = QtWidgets.QAction(MainWindow)
        self.actionHE.setEnabled(False)
        icon12 = QtGui.QIcon()
        icon12.addPixmap(QtGui.QPixmap("images/app.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionHE.setIcon(icon12)
        self.actionHE.setObjectName("actionHE")
        self.actionCLAHE = QtWidgets.QAction(MainWindow)
        self.actionCLAHE.setEnabled(False)
        self.actionCLAHE.setIcon(icon12)
        self.actionCLAHE.setObjectName("actionCLAHE")
        self.actionMethod_Setting = QtWidgets.QAction(MainWindow)
        icon13 = QtGui.QIcon()
        icon13.addPixmap(QtGui.QPixmap(":/icons/images/322.bmp"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionMethod_Setting.setIcon(icon13)
        self.actionMethod_Setting.setObjectName("actionMethod_Setting")
        self.actionUnet = QtWidgets.QAction(MainWindow)
        self.actionUnet.setEnabled(False)
        icon14 = QtGui.QIcon()
        icon14.addPixmap(QtGui.QPixmap("images/micro.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionUnet.setIcon(icon14)
        self.actionUnet.setObjectName("actionUnet")
        self.actionWPUnet = QtWidgets.QAction(MainWindow)
        self.actionWPUnet.setEnabled(False)
        self.actionWPUnet.setIcon(icon14)
        self.actionWPUnet.setObjectName("actionWPUnet")
        self.actionOTSU = QtWidgets.QAction(MainWindow)
        self.actionOTSU.setEnabled(False)
        self.actionOTSU.setIcon(icon14)
        self.actionOTSU.setObjectName("actionOTSU")
        self.actionDouble_Threshold = QtWidgets.QAction(MainWindow)
        self.actionDouble_Threshold.setEnabled(False)
        self.actionDouble_Threshold.setIcon(icon14)
        self.actionDouble_Threshold.setObjectName("actionDouble_Threshold")
        self.actionImage_Segmentation = QtWidgets.QAction(MainWindow)
        self.actionImage_Segmentation.setEnabled(False)
        self.actionImage_Segmentation.setIcon(icon14)
        self.actionImage_Segmentation.setObjectName("actionImage_Segmentation")
        self.actionHuman_Modify = QtWidgets.QAction(MainWindow)
        self.actionHuman_Modify.setEnabled(False)
        self.actionHuman_Modify.setIcon(icon11)
        self.actionHuman_Modify.setObjectName("actionHuman_Modify")

        self.actionRMDC = QtWidgets.QAction(MainWindow)
        self.actionRMDC.setEnabled(False)
        self.actionRMDC.setIcon(icon123)
        self.actionRMDC.setObjectName("actionRMDC")

        self.actionSave = QtWidgets.QAction(MainWindow)
        self.actionSave.setEnabled(False)
        self.actionSave.setIcon(icon8)
        self.actionSave.setObjectName("actionSave")
        self.actionInverse_Value = QtWidgets.QAction(MainWindow)
        self.actionInverse_Value.setEnabled(False)
        self.actionInverse_Value.setObjectName("actionInverse_Value")
        self.actionMulti_Image_Process = QtWidgets.QAction(MainWindow)
        self.actionMulti_Image_Process.setCheckable(True)
        self.actionMulti_Image_Process.setObjectName("actionMulti_Image_Process")
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.actionNext_Image)
        self.menuFile.addAction(self.actionPrev_Image)
        self.menuFile.addAction(self.actionOpen_Dir)
        self.menuFile.addAction(self.actionSave_Origin_as)
        self.menuFile.addAction(self.actionSave_Label_as)
        self.menuFile.addAction(self.actionChange_Output_Dir)
        self.menuFile.addAction(self.actionDelete_Label_File)
        self.menuFile.addAction(self.actionQuit)
        self.menuDL_3.addAction(self.actionUnet)
        self.menuDL_3.addAction(self.actionWPUnet)
        self.menuThreshold.addAction(self.actionOTSU)
        self.menuThreshold.addAction(self.actionDouble_Threshold)
        self.menuDL_2.addSeparator()
        self.menuDL_2.addAction(self.menuDL_3.menuAction())
        self.menuDL_2.addAction(self.menuThreshold.menuAction())
        self.menuDL_2.addAction(self.actionInverse_Value)
        self.menuHuman_Modify_2.addAction(self.actionDouble_Column)
        self.menuHuman_Modify_2.addAction(self.actionSingle_Column)
        self.menuEnhancement.addAction(self.actionHE)
        self.menuEnhancement.addAction(self.actionCLAHE)
        self.menuEdit.addAction(self.menuDL_2.menuAction())
        self.menuEdit.addAction(self.menuHuman_Modify_2.menuAction())
        self.menuEdit.addAction(self.menuEnhancement.menuAction())
        self.menuEdit.addAction(self.actionMulti_Image_Process)
        self.menuView.addAction(self.actZoomIn)
        self.menuView.addAction(self.actZoomOut)
        self.menuView.addAction(self.actZoomRealSize)
        self.menuView.addAction(self.actZoomFitWin)
        self.menuView.addAction(self.actZoomFitW)
        self.menuSetting.addAction(self.actionMethod_Setting)
        self.menuBar.addAction(self.menuFile.menuAction())
        self.menuBar.addAction(self.menuEdit.menuAction())
        self.menuBar.addAction(self.menuView.menuAction())
        self.menuBar.addAction(self.menuSetting.menuAction())
        self.mainToolBar.addAction(self.actionOpen)
        self.mainToolBar.addAction(self.actionOpen_Dir)
        self.mainToolBar.addAction(self.actionNext_Image)
        self.mainToolBar.addAction(self.actionPrev_Image)
        self.mainToolBar.addAction(self.actionSave)
        self.mainToolBar.addAction(self.actionDelete_Label_File)
        self.mainToolBar.addSeparator()
        self.mainToolBar.addAction(self.actionImage_Segmentation)
        self.mainToolBar.addAction(self.actionHuman_Modify)
        self.mainToolBar.addAction(self.actionRMDC)

        self.retranslateUi(MainWindow)
        self.actionQuit.triggered.connect(MainWindow.close)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow Application"))
        self.menuFile.setTitle(_translate("MainWindow", "文件"))
        # self.menuEdit.setTitle(_translate("MainWindow", "界面结合指数"))
        self.menuDL_2.setTitle(_translate("MainWindow", "分割"))
        self.menuDL_3.setTitle(_translate("MainWindow", "DL"))
        self.menuThreshold.setTitle(_translate("MainWindow", "Threshold"))
        self.menuHuman_Modify_2.setTitle(_translate("MainWindow", "Human Modify"))
        self.menuEnhancement.setTitle(_translate("MainWindow", "Enhancement"))
        self.menuView.setTitle(_translate("MainWindow", "视图"))
        # self.menuSetting.setTitle(_translate("MainWindow", "设置"))
        self.filelist.setWindowTitle(_translate("MainWindow", "文件列表"))
        self.search.setPlaceholderText(_translate("MainWindow", "搜索文件"))
        self.actionOpen.setText(_translate("MainWindow", "打开图像"))
        self.actionOpen.setStatusTip(_translate("MainWindow", "Open an image"))
        self.actionOpen.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.actionNext_Image.setText(_translate("MainWindow", "下一张"))
        self.actionNext_Image.setStatusTip(_translate("MainWindow", "Open next"))
        self.actionNext_Image.setShortcut(_translate("MainWindow", "D"))
        self.actionPrev_Image.setText(_translate("MainWindow", "上一张"))
        self.actionPrev_Image.setStatusTip(_translate("MainWindow", "Open prev"))
        self.actionPrev_Image.setShortcut(_translate("MainWindow", "A"))
        self.actionOpen_Dir.setText(_translate("MainWindow", "打开目录"))
        self.actionOpen_Dir.setStatusTip(_translate("MainWindow", "Open Dir"))
        self.actionOpen_Dir.setShortcut(_translate("MainWindow", "Ctrl+U"))
        self.actZoomIn.setText(_translate("MainWindow", "放大"))
        self.actZoomIn.setStatusTip(_translate("MainWindow", "Increase zoom level"))
        self.actZoomIn.setShortcut(_translate("MainWindow", "Ctrl+="))
        self.actZoomOut.setText(_translate("MainWindow", "缩小"))
        self.actZoomOut.setStatusTip(_translate("MainWindow", "Decrease zoom level"))
        self.actZoomOut.setShortcut(_translate("MainWindow", "Ctrl+-"))
        self.actZoomRealSize.setText(_translate("MainWindow", "原始大小"))
        self.actZoomRealSize.setStatusTip(_translate("MainWindow", "Zoom to original size"))
        self.actZoomRealSize.setShortcut(_translate("MainWindow", "Ctrl+0"))
        self.actZoomFitWin.setText(_translate("MainWindow", "适应窗口"))
        self.actZoomFitWin.setStatusTip(_translate("MainWindow", "Zoom follows window size"))
        self.actZoomFitWin.setShortcut(_translate("MainWindow", "Ctrl+F"))
        self.actZoomFitW.setText(_translate("MainWindow", "适应宽度"))
        self.actZoomFitW.setStatusTip(_translate("MainWindow", "Zoom follows window width"))
        self.actZoomFitW.setShortcut(_translate("MainWindow", "Ctrl+Shift+F"))
        self.actionSave_Origin_as.setText(_translate("MainWindow", "另存为"))
        self.actionSave_Origin_as.setStatusTip(_translate("MainWindow", "Save original image"))
        self.actionSave_Origin_as.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.actionSave_Label_as.setText(_translate("MainWindow", "Save Label as"))
        self.actionSave_Label_as.setStatusTip(_translate("MainWindow", "Save labels to file"))
        self.actionSave_Label_as.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.actionChange_Output_Dir.setText(_translate("MainWindow", "更改输出目录"))
        self.actionChange_Output_Dir.setShortcut(_translate("MainWindow", "C"))
        self.actionDelete_Label_File.setText(_translate("MainWindow", "撤销操作"))
        self.actionDelete_Label_File.setStatusTip(_translate("MainWindow", "Delete current label file"))
        self.actionDelete_Label_File.setShortcut(_translate("MainWindow", "Ctrl+Del"))
        self.actionQuit.setText(_translate("MainWindow", "退出"))
        self.actionQuit.setStatusTip(_translate("MainWindow", "Quit application"))
        self.actionQuit.setShortcut(_translate("MainWindow", "Ctrl+Q"))
        self.actionDouble_Column.setText(_translate("MainWindow", "Double Column"))
        self.actionDouble_Column.setStatusTip(_translate("MainWindow", "Edit in double column"))
        self.actionDouble_Column.setShortcut(_translate("MainWindow", "Alt+D"))
        self.actionSingle_Column.setText(_translate("MainWindow", "Single Column"))
        self.actionSingle_Column.setStatusTip(_translate("MainWindow", "Edit in single column"))
        self.actionSingle_Column.setShortcut(_translate("MainWindow", "Alt+S"))
        self.actionHE.setText(_translate("MainWindow", "HE"))
        self.actionHE.setStatusTip(_translate("MainWindow", "Modify the original image with HE"))
        self.actionHE.setShortcut(_translate("MainWindow", "Alt+H"))
        self.actionCLAHE.setText(_translate("MainWindow", "CLAHE"))
        self.actionCLAHE.setStatusTip(_translate("MainWindow", "Modify the original image with CLAHE"))
        self.actionCLAHE.setShortcut(_translate("MainWindow", "Alt+C"))
        self.actionMethod_Setting.setText(_translate("MainWindow", "Method Setting"))
        self.actionMethod_Setting.setStatusTip(_translate("MainWindow", "Set the parameters"))
        self.actionMethod_Setting.setShortcut(_translate("MainWindow", "M"))
        self.actionUnet.setText(_translate("MainWindow", "Unet"))
        self.actionUnet.setStatusTip(_translate("MainWindow", "Modify annotation results with Unet"))
        self.actionUnet.setShortcut(_translate("MainWindow", "U"))
        self.actionWPUnet.setText(_translate("MainWindow", "WPUnet"))
        self.actionWPUnet.setStatusTip(_translate("MainWindow", "Modify annotation results with WPUnet"))
        self.actionWPUnet.setShortcut(_translate("MainWindow", "W"))
        self.actionOTSU.setText(_translate("MainWindow", "OTSU"))
        self.actionOTSU.setToolTip(_translate("MainWindow", "OTSU"))
        self.actionOTSU.setStatusTip(_translate("MainWindow", "Modify annotation results with OSTU"))
        self.actionOTSU.setShortcut(_translate("MainWindow", "O"))
        self.actionDouble_Threshold.setText(_translate("MainWindow", "Double Threshold"))
        self.actionDouble_Threshold.setStatusTip(_translate("MainWindow", "Modify annotation results with double threshold"))
        self.actionDouble_Threshold.setShortcut(_translate("MainWindow", "T"))
        self.actionImage_Segmentation.setText(_translate("MainWindow", "光学组织提取"))
        self.actionImage_Segmentation.setStatusTip(_translate("MainWindow", "The segmented by Unet"))
        self.actionImage_Segmentation.setShortcut(_translate("MainWindow", "I"))
        self.actionHuman_Modify.setText(_translate("MainWindow", "惰性组分识别"))
        self.actionHuman_Modify.setStatusTip(_translate("MainWindow", "Single column mode opens by default"))
        self.actionHuman_Modify.setShortcut(_translate("MainWindow", "H"))

        self.actionRMDC.setText(_translate("MainWindow", "变色颗粒分类"))

        self.actionSave.setText(_translate("MainWindow", "保存"))
        self.actionSave.setStatusTip(_translate("MainWindow", "Save the segmentation results"))
        self.actionSave.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.actionInverse_Value.setText(_translate("MainWindow", "Inverse Value"))
        self.actionInverse_Value.setStatusTip(_translate("MainWindow", "Inverse the segmentation value"))
        self.actionInverse_Value.setShortcut(_translate("MainWindow", "V"))
        self.actionMulti_Image_Process.setText(_translate("MainWindow", "Multi-Image Process"))

    def printf(self, mypstr):
        self.textBrowser.append(mypstr)  # 在指定的区域显示提示信息
        self.cursor = self.textBrowser.textCursor()
        self.textBrowser.moveCursor(self.cursor.End)  # 光标移到最后，这样就会自动显示出来
        QtWidgets.QApplication.processEvents()  # 一定加上这个功能，不然有卡顿

